"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// $FlowFixMe
var Validators =
/*#__PURE__*/
function () {
  function Validators() {
    _classCallCheck(this, Validators);
  }

  _createClass(Validators, null, [{
    key: "validatePositiveInteger",
    value: function validatePositiveInteger(value, valueName) {
      if (!Number.isSafeInteger(value) || value < 1) {
        throw new Error("".concat(valueName, " must be a positive integer"));
      }
    }
  }]);

  return Validators;
}();

exports.default = Validators;

_defineProperty(Validators, "isValidValue", function (value, valueType) {
  return valueType === 'integer' && Number.isSafeInteger(value) || valueType === 'decimal' && Number.isFinite(value);
});
//# sourceMappingURL=Validators.js.map