{"version":3,"sources":["../../src/validators/PropValidators.js"],"names":["PropValidators","props","validateEmptyValue","allowEmptyValue","value","NumberUtils","getParsedValue","valueType","Validators","isValidValue","Error","defaultValue","undefined","doubleClickStepAmount","stepAmount","minValue","maxValue","validateMinOrMaxValue","maxLength","valueName","toString","length","validatePositiveInteger","precision","process","env","NODE_ENV","validateValue","validateDefaultValue","validateDoubleClickStepAmount","validateMinValue","validateMaxValue","validateMaxLength","validatePrecision","validateStepAmount"],"mappings":"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","sourcesContent":["// @flow\n\n// $FlowFixMe\nimport type { Props, ValueType } from '../types/Types';\n// $FlowFixMe\nimport Validators from './Validators';\n// $FlowFixMe\nimport NumberUtils from '../utils/NumberUtils';\n\nexport default class PropValidators {\n  static validateValue(props: Props) {\n    PropValidators.validateEmptyValue(props.allowEmptyValue, props.value);\n    if (props.allowEmptyValue && !props.value) {\n      return;\n    }\n    const value = NumberUtils.getParsedValue(props.value, props.valueType);\n    if (!Validators.isValidValue(value, props.valueType)) {\n      throw new Error(\n        'value must be a string that can be parsed to integer/decimal number depending on valueType'\n      );\n    }\n  }\n\n  static validateEmptyValue(allowEmptyValue: boolean, value: string) {\n    if (!allowEmptyValue && !value) {\n      throw new Error('value is required');\n    }\n  }\n\n  static validateDefaultValue(props: Props) {\n    if (props.defaultValue !== undefined && !Validators.isValidValue(props.defaultValue, props.valueType)) {\n      throw new Error('defaultValue must be integer/decimal number depending on valueType');\n    }\n  }\n\n  static validateDoubleClickStepAmount(props: Props) {\n    if (!Validators.isValidValue(props.doubleClickStepAmount, props.valueType)) {\n      throw new Error('doubleClickStepAmount must be integer/decimal number depending on valueType');\n    }\n    if (props.doubleClickStepAmount !== 0 && props.doubleClickStepAmount <= props.stepAmount) {\n      throw new Error('doubleClickStepAmount must be greater than stepAmount');\n    }\n  }\n\n  static validateMinValue(props: Props) {\n    if (props.minValue > props.maxValue) {\n      throw new Error('maxValue must greater than or equal to minValue');\n    }\n    PropValidators.validateMinOrMaxValue(props.valueType, props.minValue, 'minValue', props.maxLength);\n  }\n\n  static validateMaxValue = (props: Props) =>\n    PropValidators.validateMinOrMaxValue(props.valueType, props.maxValue, 'maxValue', props.maxLength);\n\n  static validateMinOrMaxValue(valueType: ValueType, value: number, valueName: string, maxLength: number) {\n    if (!Validators.isValidValue(value, valueType)) {\n      throw new Error(`${valueName} must be integer/decimal number depending on valueType`);\n    }\n    if (value.toString().length > maxLength) {\n      throw new Error(`${valueName} does not fit in maxLength`);\n    }\n  }\n\n  static validateMaxLength(props: Props) {\n    Validators.validatePositiveInteger(props.maxLength, 'maxLength');\n  }\n\n  static validatePrecision(props: Props) {\n    Validators.validatePositiveInteger(props.precision, 'precision');\n  }\n\n  static validateStepAmount(props: Props) {\n    if (!Validators.isValidValue(props.stepAmount, props.valueType) || props.stepAmount <= 0) {\n      throw new Error('stepAmount must be a positive integer/decimal number depending on valueType');\n    }\n  }\n\n  static validatePropsInDevelopmentMode(props: Props) {\n    if (process.env.NODE_ENV === 'development') {\n      PropValidators.validateValue(props);\n      PropValidators.validateDefaultValue(props);\n      PropValidators.validateDoubleClickStepAmount(props);\n      PropValidators.validateMinValue(props);\n      PropValidators.validateMaxValue(props);\n      PropValidators.validateMaxLength(props);\n      PropValidators.validatePrecision(props);\n      PropValidators.validateStepAmount(props);\n    }\n  }\n}\n"],"file":"PropValidators.js"}