{"version":3,"sources":["../../src/validators/Validators.js"],"names":["Validators","value","valueName","Number","isSafeInteger","Error","valueType","isFinite"],"mappings":";;;;;;;;;;;;;;;AAEA;IAGqBA,U;;;;;;;;;4CAKYC,K,EAAeC,S,EAAmB;AAC/D,UAAI,CAACC,MAAM,CAACC,aAAP,CAAqBH,KAArB,CAAD,IAAgCA,KAAK,GAAG,CAA5C,EAA+C;AAC7C,cAAM,IAAII,KAAJ,WAAaH,SAAb,iCAAN;AACD;AACF;;;;;;;;gBATkBF,U,kBACG,UAACC,KAAD,EAAgBK,SAAhB;AAAA,SACnBA,SAAS,KAAK,SAAd,IAA2BH,MAAM,CAACC,aAAP,CAAqBH,KAArB,CAA5B,IACCK,SAAS,KAAK,SAAd,IAA2BH,MAAM,CAACI,QAAP,CAAgBN,KAAhB,CAFR;AAAA,C","sourcesContent":["// @flow\n\n// $FlowFixMe\nimport type { ValueType } from '../types/Types';\n\nexport default class Validators {\n  static isValidValue = (value: number, valueType: ValueType) =>\n    (valueType === 'integer' && Number.isSafeInteger(value)) ||\n    (valueType === 'decimal' && Number.isFinite(value));\n\n  static validatePositiveInteger(value: number, valueName: string) {\n    if (!Number.isSafeInteger(value) || value < 1) {\n      throw new Error(`${valueName} must be a positive integer`);\n    }\n  }\n}\n"],"file":"Validators.js"}