{"version":3,"sources":["../../src/utils/NumberUtils.js"],"names":["NumberUtils","value","valueType","parseInt","parseFloat","precision","valueStr","toString","factor","decimalValueStr","Math","round","length"],"mappings":";;;;;;;;;;;;;AAEA;IAGqBA,W;;;;;;;;;mCACGC,K,EAAeC,S,EAA8B;AACjE,aAAOA,SAAS,KAAK,SAAd,GAA0BC,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAAlC,GAAgDG,UAAU,CAACH,KAAD,CAAjE;AACD;;;kDAGCA,K,EACAC,S,EACAG,S,EACAC,Q,EACQ;AACR,UAAIJ,SAAS,KAAK,SAAlB,EAA6B;AAC3B,eAAOD,KAAK,CAACM,QAAN,EAAP;AACD;;AAED,UAAMC,MAAM,YAAG,EAAH,EAASH,SAAT,CAAZ;AACA,UAAMI,eAAe,GAAG,CAACC,IAAI,CAACC,KAAL,CAAWV,KAAK,GAAGO,MAAnB,IAA6BA,MAA9B,EAAsCD,QAAtC,EAAxB;AACA,aAAOD,QAAQ,IAAIA,QAAQ,CAACA,QAAQ,CAACM,MAAT,GAAkB,CAAnB,CAAR,KAAkC,GAA9C,aAAuDH,eAAvD,SAA4EA,eAAnF;AACD","sourcesContent":["// @flow\n\n// $FlowFixMe\nimport type { ValueType } from '../types/Types';\n\nexport default class NumberUtils {\n  static getParsedValue(value: string, valueType: ValueType): number {\n    return valueType === 'integer' ? parseInt(value, 10) : parseFloat(value);\n  }\n\n  static getValueWithPrecisionAsString(\n    value: number,\n    valueType: ValueType,\n    precision: number,\n    valueStr?: string\n  ): string {\n    if (valueType === 'integer') {\n      return value.toString();\n    }\n\n    const factor = 10 ** precision;\n    const decimalValueStr = (Math.round(value * factor) / factor).toString();\n    return valueStr && valueStr[valueStr.length - 1] === '.' ? `${decimalValueStr}.` : decimalValueStr;\n  }\n}\n"],"file":"NumberUtils.js"}