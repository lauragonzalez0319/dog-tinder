"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Validators = _interopRequireDefault(require("../validators/Validators"));

var _NumberUtils = _interopRequireDefault(require("./NumberUtils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ButtonUtils =
/*#__PURE__*/
function () {
  function ButtonUtils() {
    _classCallCheck(this, ButtonUtils);
  }

  _createClass(ButtonUtils, null, [{
    key: "isDisabledButton",
    value: function isDisabledButton(buttonType, _ref) {
      var maxValue = _ref.maxValue,
          minValue = _ref.minValue,
          stepAmount = _ref.stepAmount,
          value = _ref.value,
          valueType = _ref.valueType;

      var currentValue = _NumberUtils.default.getParsedValue(value, valueType);

      var nextIncrementedValue = currentValue + stepAmount;
      var nextDecrementedValue = currentValue - stepAmount;

      if (buttonType === 'increment') {
        return !_Validators.default.isValidValue(currentValue, valueType) || nextIncrementedValue > maxValue;
      }

      return !_Validators.default.isValidValue(currentValue, valueType) || nextDecrementedValue < minValue;
    }
  }, {
    key: "getButtonIconName",
    value: function getButtonIconName(buttonType, buttonPlacement) {
      if (buttonPlacement === 'right') {
        if (buttonType === 'increment') {
          return 'caret up';
        }

        return 'caret down';
      }

      if (buttonType === 'increment') {
        return 'plus';
      }

      return 'minus';
    }
  }]);

  return ButtonUtils;
}();

exports.default = ButtonUtils;
//# sourceMappingURL=ButtonUtils.js.map