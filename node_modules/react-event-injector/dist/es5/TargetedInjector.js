"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Injector_1 = require("./Injector");
var propTypes_1 = require("./propTypes");
var prop_types_1 = require("prop-types");
var TargetedInjector = (function (_super) {
    __extends(TargetedInjector, _super);
    function TargetedInjector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ref = React.createRef();
        _this.addEventListener = function (name, cb, options) {
            if (_this.ref.current) {
                _this.ref.current.addEventListener(name, cb, options);
            }
        };
        _this.removeEventListener = function (name, cb, options) {
            if (_this.ref.current) {
                _this.ref.current.removeEventListener(name, cb, options);
            }
        };
        return _this;
    }
    TargetedInjector.prototype.componentDidMount = function () {
        this.setState({});
    };
    TargetedInjector.prototype.render = function () {
        var _a = this.props, target = _a.target, rest = __rest(_a, ["target"]);
        return (React.createElement(Injector_1.EventInjector, __assign({}, rest, { ref: this.ref }), function (ref) {
            ref(typeof target === 'function' ? target() : target);
            return null;
        }));
    };
    TargetedInjector.propTypes = __assign({}, propTypes_1.eventTypes, { target: prop_types_1.oneOfType([prop_types_1.func, prop_types_1.any]) });
    return TargetedInjector;
}(React.Component));
exports.TargetedInjector = TargetedInjector;
